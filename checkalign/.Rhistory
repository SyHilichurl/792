}
g2
g
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
g
g2
grid.force()
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
listing
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
grobInfo
pair <- calOverlap(grobInfo)
RandC <- countFacets(pair, ".")
countFacets <- function(pair, item) {
cnt=0
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
cnt=cnt+1
}
}
nrow <- n2mfrow(cnt)[1]
ncol <- n2mfrow(cnt)[2]
c(nrow, ncol)
}
RandC <- countFacets(pair, ".")
RandC
excludeGrob <- function(grobInfo, exclude) {
findMatch <- function(exclude) {
sapply(grid.grep(exclude, grep = TRUE, global = TRUE), as.character)
}
matches <- unlist(lapply(exclude, findMatch))
findGrob <- function(g) {
!attr(g, "name") %in% matches
}
Filter(findGrob, grobInfo)
}
includeGrob <- function(grobInfo, include) {
findMatch <- function(include) {
sapply(grid.grep(include, grep = TRUE, global = TRUE), as.character)
}
matches <- unlist(lapply(include, findMatch))
findGrob <- function(g) {
attr(g, "name") %in% matches
}
Filter(findGrob, grobInfo)
}
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
RandC
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
grobInfo[[pair[[1]][2]]]
drawMatch <- function(g, grobInfo, pair, item, RandC, facet="page") {
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
g
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(0,0,1,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(0,0,1,0.1), lty=lty))
devAskNewPage(old)
}
}
}
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
drawMatch <- function(g, grobInfo, pair, item, RandC, facet="page") {
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
g
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(0,0,1,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(0,0,1,0.1), lty=lty))
devAskNewPage(old)
}
}
}
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
g2
drawMatch <- function(g, grobInfo, pair, item, RandC, facet="page") {
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
g
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(0,0,1,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(0,0,1,0.1), lty=lty))
devAskNewPage(old)
}
}
}
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
grid.force()
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
grid.ls()
?devAskNewPage(TRUE)
drawMatch <- function(g, grobInfo, pair, item, RandC, facet="page") {
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
grid.newpage()
g
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
}
}
}
excludeGrob <- function(grobInfo, exclude) {
findMatch <- function(exclude) {
sapply(grid.grep(exclude, grep = TRUE, global = TRUE), as.character)
}
matches <- unlist(lapply(exclude, findMatch))
findGrob <- function(g) {
!attr(g, "name") %in% matches
}
Filter(findGrob, grobInfo)
}
includeGrob <- function(grobInfo, include) {
findMatch <- function(include) {
sapply(grid.grep(include, grep = TRUE, global = TRUE), as.character)
}
matches <- unlist(lapply(include, findMatch))
findGrob <- function(g) {
attr(g, "name") %in% matches
}
Filter(findGrob, grobInfo)
}
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
grid.force()
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
g2plot <- function(g) {
UseMethod("g2plot")
}
g2plot.ggplot <- function(g) {
print(g)
grid.force()
}
png("plot0.png", width=400, height=400)
g2plot(g)
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
listing
drawMatch <- function(g, grobInfo, pair, item, RandC, facet="page") {
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
img0 <- readPNG("plot0.png")
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
grid.newpage()
grid.raster(img0,interpolate=FALSE,height=unit(1,"npc"), width=unit(1, "npc"))
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
}
}
}
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
png("plot0.png", width=400, height=400)
g2plot(g)
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
png("plot0.png", width=400, height=400)
g2plot(g)
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
dev.off()
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
g2
debug(drawMatch)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
img0 <- readPNG("plot0.png")
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
grid.newpage()
grid.raster(img0,interpolate=FALSE,height=unit(1,"npc"), width=unit(1, "npc"))
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
}
}
function(g, grobInfo, pair, item, RandC, facet="page") {
nrow <- RandC[1]
ncol <- RandC[2]
old <- devAskNewPage(TRUE)
img0 <- readPNG("plot0.png")
for (i in seq_along(pair)) {
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
grid.newpage()
grid.raster(img0,interpolate=FALSE,height=unit(1,"npc"), width=unit(1, "npc"))
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
}
}
}
i
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
grid.newpage()
grid.raster(img0,interpolate=FALSE,height=unit(1,"npc"), width=unit(1, "npc"))
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
}
grid.newpage()
img0
grid.raster(img0,interpolate=FALSE,height=unit(1,"npc"), width=unit(1, "npc"))
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
y
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
if (attr(grobInfo[[pair[[i]][2]]], "name") %in% item ||
attr(grobInfo[[pair[[i]][3]]], "name") %in% item) {
grid.newpage()
grid.raster(img0,interpolate=FALSE,height=unit(1,"npc"), width=unit(1, "npc"))
lty=3
x = as.numeric(grobInfo[[pair[[i]][2]]][3])
width = as.numeric(grobInfo[[pair[[i]][2]]][5]) -
as.numeric(grobInfo[[pair[[i]][2]]][3])
y = as.numeric(grobInfo[[pair[[i]][2]]][4])
height = as.numeric(grobInfo[[pair[[i]][2]]][6]) -
as.numeric(grobInfo[[pair[[i]][2]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
x = as.numeric(grobInfo[[pair[[i]][3]]][3])
width = as.numeric(grobInfo[[pair[[i]][3]]][5]) -
as.numeric(grobInfo[[pair[[i]][3]]][3])
y = as.numeric(grobInfo[[pair[[i]][3]]][4])
height = as.numeric(grobInfo[[pair[[i]][3]]][6]) -
as.numeric(grobInfo[[pair[[i]][3]]][4])
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "red", fill = rgb(1,0,0,0.1), lty=lty))
devAskNewPage(old)
}
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
png("plot0.png", width=400, height=400)
g2plot(g)
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
dev.off()
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
png("plot0.png", width=400, height=400)
g2plot(g)
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
dev.off()
img0 <- readPNG("plot0.png")
g2plot(g2)
grobInfo <- getGrobInfo(listing)
g2 <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
scale_color_manual(values = c("1" = "blue", "0" = "azure"))
png("plot0.png", width=400, height=400)
g2plot(g2)
listing <- do.call(cbind, grid.ls(view=TRUE, print=FALSE))
grobInfo <- getGrobInfo(listing)
pair <- calOverlap(grobInfo)
dev.off()
img0 <- readPNG("plot0.png")
include <- "."
exclude <- NULL
if (length(include))
grobInfoF <- includeGrob(grobInfo, include)
if (length(exclude))
grobInfoF <- excludeGrob(grobInfo, exclude)
item <- sapply(grobInfoF, function(x) attr(x, "name"))
RandC <- countFacets(pair, item)
drawMatch(g2, grobInfo, pair, item, RandC, facet="page")
