source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
iter <- 12
try(if(iter > 10) stop("too many iterations"))
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
?tryCatch
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
checkalign9()
checkalign2()
devtools::load_all(".")
checkalign8()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/g2plot.R")
checkalign8()
checkalign2()
dev.cur()
dev.off()
dev.off()
library(png)
library(pdf)
library(grid)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
checkalign7()
checkalign9()
checkalign8()
checkalign9()
checkalign2()
a<-list()
a[1]<-table(0)
a[2]<-table(1)
a
a["align"]=table(0)
a
list("unaligned" = list(0), "aligned" = table(0))
character(4)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
res<-0
res[1:0]
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
table(1)
name(table(1))
names(table(1))
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
x <- rnorm(1000)
library(gridGraphics)
clip1 <- function() {
set.seed(1)
x <- rnorm(1000)
hist(x, xlim = c(-4,4))
usr <- par("usr")
clip(usr[1], -2, usr[3], usr[4])
hist(x, col = 'red', add = TRUE)
clip(2, usr[2], usr[3], usr[4])
hist(x, col = 'blue', add = TRUE)
}
plotdiff(expression(clip1()), "clip-1")
clip1
clip1()
expression(clip1())
libraray(gridGraphics)
library(gridGraphics)
expression(clip1())
plotdiff(expression(clip1()), "clip-1")
install.packages("pdftools")
library(pdftools)
plotdiff(expression(clip1()), "clip-1")
?plotdiff
require(grDevices) # for colours
library(gridGraphics)
contour1 <- function() {
x <- -6:16
par(mfrow = c(2, 2))
contour(outer(x, x), drawlabels = FALSE)
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
drawlabels = FALSE)
contour(x, x, z, ylim = c(1, 6), method = "simple",
xlab = quote(x[1]), ylab = quote(x[2]),
drawlabels = FALSE)
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, main = "20 levels",
drawlabels = FALSE)
}
contour2 <- function() {
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
par(mfrow = c(2, 2), mar = rep(0, 4))
for(f in pi^(0:3))
contour(cos(r^2)*exp(-r/f),
drawlabels = FALSE, axes = FALSE, frame = TRUE)
}
contour3 <- function() {
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(pty = "s", bg = "lightcyan")
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE,
drawlabels = FALSE)
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
}
# Disable antialiasing because of image() within contour1()
plotdiff(expression(contour1()), "contour-1", antialias=FALSE)
plotdiff(expression(contour2()), "contour-2")
plotdiff(expression(contour3()), "contour-3")
checkalign2()
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
grepl("xlab", res[[1]])
res[[1]]
if (grepl("xlab", res[[1]]) && grepl("ylab", res[[1]]) && length(res[[1]]) == 2)
cat("Correct Result\n")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
res[[1]]
length(res[[1]])
length(res[[1]][1])
typeof(res[[1]])
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
res
res[[1]]
grepl("xlab", res[[1]])
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
?else
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
res <- checkalign3()
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("D:/R-4.2.1/library/gridGraphics/test-scripts/test-box.R")
set.seed(1)
plot(1:7, abs(stats::rnorm(7)), type = "h", axes = FALSE)
dev.off()
plot(1:7, abs(stats::rnorm(7)), type = "h", axes = FALSE)
axis(1, at = 1:7, labels = letters[1:7])
box(lty = '1373', col = 'red')
plotdiff(expression(box1()), "box-1")
plotdiff(expression(box1()), "box-2")
plotdiffResult()
?plotdiffResult
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign7()
checkalign8()
tryCatch(checkalign8(),error=function(e) print("yes"))
tryCatch(checkalign8(),error=function(e) print(e))
tryCatch(checkalign1(),error=function(e) print(e))
tryCatch({
checkalign1()
checkalign8()
}, error = function(e) {
print(paste("Error occurred in function:", conditionMessage(e)))
})
tryCatch({
checkalign1()
checkalign8()
}, error = function(e) {
print(paste("Error occurred in function:", conditionMessage(e)))
})
tryCatch({
checkalign1() checkalign4()
tryCatch({
checkalign1() checkalign4()
tryCatch({
checkalign1() + checkalign4()
checkalign8() + checkalign3()
}, error = function(e) {
print(paste("Error occurred in function:", conditionMessage(e)))
})
?tryCatch
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
?conditionMessage
#   } else
#   cat("Wrong Result in test2\n")
#
#
# res <- checkalign4()
# if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
#   cat("Correct Result\n")
# } else
#   warning("Wrong Result in test4\n")
#
tryCatch(checkalign8(),error=function(e) print("Test 8 Not Run"))
#   } else
#   cat("Wrong Result in test2\n")
#
#
# res <- checkalign4()
# if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
#   cat("Correct Result\n")
# } else
#   warning("Wrong Result in test4\n")
#
tryCatch(checkalign8(),error=function(e) warning("Test 8 Not Run"))
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
# Using tryCatch to handle errors and warnings
tryCatch({
res <- checkalign4()
if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
cat("Correct Result\n")
} else {
warning("Wrong Result in Test 4\n")
}
}, error = function(e) {
cat("Error:", conditionMessage(e), "\n")
}, warning = function(w) {
cat("Warning:", conditionMessage(w), "\n")
})
# Using tryCatch to handle errors and warnings
tryCatch({
res <- checkalign4()
if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
cat("Correct Result\n")
} else {
warning("Wrong Result in Test 4\n")
}
}, error = function(e) {
warning("Test 4 Not Run")
}, warning = function(w) {
warning("Wrong Result in Test 4\n")
})
tryCatch({
res <- checkalign2()
if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
message("Correct Result for Test 2\n")
} else {
warning("Wrong Result for Test 2\n")
}
}, error = function(e) {
warning("Test 2 Not Run\n")
}, warning = function(w) {
warning("Wrong Result in Test 2\n")
})
tryCatch({
res <- checkalign4()
if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
message("Correct Result for Test 4\n")
} else {
warning("Wrong Result for Test 4\n")
}
}, error = function(e) {
warning("Test 4 Not Run\n")
}, warning = function(w) {
warning("Wrong Result in Test 4\n")
})
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
message()
message
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
message()
?message
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
suppressMessages(message("ABC"))
message("ABC", "DEF")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
get(".Last.message", envir = baseenv())
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2 <- function() {
sink(NULL)
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
sink()
res
}
checkalign2()
# Define your functions
f <- function() {
print("This is the output of f()")
}
g <- function(x) {
# Suppress output generated by f() using sink()
sink(NULL)
result <- x()
sink()  # Restore normal output
return(result)
}
# Call g(f()) to suppress output from f()
g(f)
# Define your functions
f <- function() {
print("This is the output of f()")
}
g <- function(x) {
# Capture the output of x() and suppress it
output <- capture.output(x())
# Return any result if necessary
return(output)  # Or return(NULL) if there's no result
}
# Call g(f()) to suppress output from f()
g(f)
# Define your functions
f <- function() {
print("This is the output of f()")
}
g <- function(x) {
# Capture the output of x() and suppress it
output <- capture.output(x())
# Return any result if necessary
return(output)  # Or return(NULL) if there's no result
}
# Call g(f()) to suppress output from f()
g(f)
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
res
}
invisible(checkalign2())
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
demo(graphics)
demo()
library(graphics)
demo(graphics)
demo(graphics())
demo("graphics")
demo("graphics")
dev.off()
demo("graphics")
?graphics
library(graphics)
demo(graphics.off())
demo(graphics)
demo("graphics")
>demo
?demo
demo()
demo(image)
demo(package="graphics")
demo(graphics, package="graphics")
demo(graphics)
plot(demo(graphics))
plot(demo(graphics))
demo(graphics)
demo(graphics)
library(graphics)
library(graphics)
demo(graphics)
y <- recordPlot()
replayPlot(y)
checkAlignment(y, include="axis")
devtools::load_all(".")
y <- recordPlot()
replayPlot(y)
checkAlignment(y, include="axis")
list("unaligned" = 0, "aligned" = as.list(table(0)))
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
res
checkalign9 <- function() {
plot(mtcars$mpg, mtcars$disp)
y <- recordPlot()
replayPlot(y)
res <- checkAlignment(y, include="axis")
res
}
checkalign9()
checkalign9()
checkalign9()
demo(graphics)
last <- recordPlot()
replayPlot(last)
checkAlignment(last)
plot(last)
last
demo(graphics)
demo(graphics)
# Create a grid plot
grid.newpage()
grid.circle(x = 0.5, y = 0.5, r = 0.4, gp = gpar(fill = "red"))
# Save the grid plot as an SVG file
grid.export("plot.svg")
gridSVG::grid.export("plot.svg")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
warning("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
res
}
source("~/GitHub/792/checkalign/tests/test2.R")
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
tryCatch({
res <- checkalign8()
if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
message("Correct Result for Test 8\n")
} else {
warning("Wrong Result for Test 8\n")
}
}, error = function(e) {
warning("Test 8 Not Run\n")
})
tryCatch({
res <- checkalign4()
if (any(grepl("xlab", res[[1]])) && any(grepl("ylab", res[[1]])) && length(res[[1]]) == 2) {
message("Correct Result for Test 4\n")
} else {
warning("Wrong Result for Test 4\n")
}
}, error = function(e) {
warning("Test 4 Not Run\n")
})
plot(1)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
?pdf
source("~/GitHub/792/checkalign/R/checkAlignment.R")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list = c("checkAlignment"))
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
g2plot.recordedplot <- function(g) {
dev.control("enable")
replayPlot(g)
gridGraphics::grid.echo()
}
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4, width=500, height=32)
devtools::load_all(".")
devtools::load_all(".")
?checkalign
?checkAlignment
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
