if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
devtools::load_all(".")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
x
devtools::load_all(".")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
debug(checkalign2)
checkalign2()
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4
a
checkalign2()
debug(checkAlignment)
checkalign2()
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
source("~/GitHub/792/checkalign/R/checkAlignment.R")
debug(checkAlignment.ggplot)
checkalign2()
function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
grobInfo
debug(drawMatch)
checkalign2()
function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
grobInfo
length(grobInfo)
devtools::load_all(".")
devtools::load_all(".")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
devtools::load_all(".")
devtools::load_all(".")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
devtools::load_all(".")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
drawMatch <- function(g, matchInfo, grobInfo, item, r, align, RandC) {
# findMatch <- function(item) {
#   sapply(grid.grep(item, grep = TRUE, global = TRUE), as.character)
# }
# matches <- unlist(lapply(item, findMatch))
nrow <- RandC[1]
ncol <- RandC[2]
# vps <- viewport(width = ncol*grobInfo[[1]]["right"], height = nrow*grobInfo[[1]]["top"],
#                 default.units = "inch",
#                 layout = grid.layout(nrow, ncol))
vps <- viewport(layout = grid.layout(nrow, ncol))
pushViewport(vps)
j = 1
matches <- logical(length(item))
if (align=="b" | align=="v") {
for (index in seq_along(matchInfo$x)) {
flag = FALSE
cnt = 1
for (i in matchInfo$xAlignment[[index]])
if (attr(grobInfo[[i]], "name") %in% item) {
flag = TRUE
break
}
if (flag) {
crow <- ceiling(j / ncol)
ccol <- j %% ncol
ccol[ccol == 0] <- ncol
cvp = viewport(layout.pos.row = crow, layout.pos.col = ccol)
print(g, vp=cvp)
j = j + 1
for (i in matchInfo$xAlignment[[index]]) {
lty = 3
tmp <- attr(grobInfo[[i]], "name")
if (tmp %in% item) {
lty = 1
matches[which(item==tmp)] <- TRUE
}
# x = grobInfo[[i]][1]
# width = (grobInfo[[i]][2] - grobInfo[[i]][1])
# y = grobInfo[[i]][3]
# height = (grobInfo[[i]][4] - grobInfo[[i]][3])
x = grobInfo[[i]][1]/ncol
width = (grobInfo[[i]][2] - grobInfo[[i]][1])/ncol
y = grobInfo[[i]][3]/nrow
height = (grobInfo[[i]][4] - grobInfo[[i]][3])/nrow
name = paste0("x.", nameFour(x,r), ".", cnt, ".",
attr(grobInfo[[i]],"name"),".alignment")
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "blue", fill = rgb(0,0,1,0.1), lty=lty),
name = name, vp=cvp)
cnt = cnt + 1
}
# grid.lines(x = matchInfo$x[index], default.units = "in",
#            gp = gpar(col = "blue"), vp=cvp,
#            name = paste0("x.", nameFour(matchInfo$x[index],r), ".alignment"))
grid.lines(x = matchInfo$x[index]/ncol, default.units = "in",
gp = gpar(col = "blue"), vp=cvp,
name = paste0("x.", nameFour(matchInfo$x[index],r), ".alignment"))
}
}
}
if (align=="b" | align=="v") {
for (index in seq_along(matchInfo$y)) {
flag = FALSE
cnt = 1
for (i in matchInfo$yAlignment[[index]])
if (attr(grobInfo[[i]], "name") %in% item) {
flag = TRUE
break
}
if (flag) {
crow <- ceiling(j / ncol)
ccol <- j %% ncol
ccol[ccol == 0] <- ncol
cvp = viewport(layout.pos.row = crow, layout.pos.col = ccol)
print(g, vp=cvp)
j = j + 1
for (i in matchInfo$yAlignment[[index]]) {
lty = 3
tmp <- attr(grobInfo[[i]], "name")
if (tmp %in% item) {
lty = 1
matches[which(item==tmp)] <- TRUE
}
# x = grobInfo[[i]][1]
# width = (grobInfo[[i]][2] - grobInfo[[i]][1])
# y = grobInfo[[i]][3]
# height = (grobInfo[[i]][4] - grobInfo[[i]][3])
x = grobInfo[[i]][1]/ncol
width = (grobInfo[[i]][2] - grobInfo[[i]][1])/ncol
y = grobInfo[[i]][3]/nrow
height = (grobInfo[[i]][4] - grobInfo[[i]][3])/nrow
name = paste0("y.", nameFour(y,r), ".", cnt, ".",
attr(grobInfo[[i]],"name"),".alignment")
grid.rect(x = x, y = y, width = width, height = height,
default.units = "in", just = c(0, 0),
gp = gpar(col = "blue", fill = rgb(0,0,1,0.1), lty=lty),
name = name, vp=cvp)
cnt = cnt + 1
}
# grid.lines(y = matchInfo$y[index], default.units = "in",
#            gp = gpar(col = "blue"), vp=cvp,
#            name = paste0("y.", nameFour(matchInfo$y[index],r), ".alignment"))
grid.lines(y = matchInfo$y[index]/nrow, default.units = "in",
gp = gpar(col = "blue"), vp=cvp,
name = paste0("y.", nameFour(matchInfo$y[index],r), ".alignment"))
}
}
}
upViewport()
if (length(item[matches])>0)
cat("\nAligned!!\n")
for (i in seq_along(item[matches]))
cat(item[matches][i], "\n")
item[matches]
}
devtools::load_all(".")
library(grid)
devtools::load_all(".")
devtools::load_all(".")
library(grid)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign3()
library(png)
checkalign3()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign3()
checkalign2()
unlink("plot1")
unlink("plot2")
checkalign3()
checkalign2()
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
devtools::load_all(".")
checkalign2 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg, color=factor(vs))) +
labs(title = "test") + facet_wrap(~gear)
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, include="text", exclude=c("tag", "points"), rounding=4)
cat(res)
}
checkalign2()
devtools::load_all(".")
library(grid)
library(png)
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
checkalign3()
checkalign1()
checkalign4()
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
?trellis.device
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
checkalign4()
checkalign4()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign1()
checkalign2()
checkalign3()
checkalign4()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
devtools::load_all(".")
library(grid)
library(png)
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign4()
checkalign5()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign5()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign5()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign5()
devtools::load_all(".")
library(png)
library(grid)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign1()
checkalign2()
checkalign3()
res
checkalign4()
checkalign3()
library(grid)
library(png)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign1()
checkalign2()
checkalign3()
checkalign4()
unlink("plot1.png")
library(grid)
library(png)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign5()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/checkAlignment.R")
checkalign4()
dev.off
dev.off()
devtools::load_all(".")
rm(list = c("checkAlignment"))
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign1()
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
?viewport
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
?convertWidth
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/R/checkAlignment.R")
checkalign2()
devtools::load_all(".")
rm(list = c("checkAlignment"))
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
current.viewport()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
checkalign3()
checkalign4()
dev.off()
checkalign3 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg))
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, rounding=3, show = "aligned", align="v")
cat(res)
}
checkalign3 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg))
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, rounding=3, show = "aligned", align="b")
cat(res)
}
checkalign3()
devtools::load_all(".")
checkalign3 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg))
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, rounding=3, show = "aligned", align="b")
cat(res)
}
checkalign3()
devtools::load_all(".")
checkalign3()
checkalign3 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg))
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, rounding=3, show = "aligned", align="b")
cat(res)
}
checkalign3()
dev.off
dev.off()
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
dev.off()
checkalign2()
dev.off()
unlink("plot1.png")
unlink("plot2.png")
dev.off()
dev.off()
unlink("plot1.png")
library(grid)
library(png)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
checkalign3 <- function() {
if (require(ggplot2)) {
g <- ggplot(mtcars) + geom_point(aes(disp, mpg))
} else {
cat("The example requires 'ggplot2' which is not installed.")
}
res <- checkAlignment(g, rounding=3, show = "aligned", align="b")
cat(res)
}
checkalign3()
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign5()
devtools::load_all(".")
library(grid)
library(png)
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign5()
library(png)
library(grid)
devtools::load_all(".")
source("~/GitHub/792/checkalign/tests/test_checkAlign.R")
checkalign2()
